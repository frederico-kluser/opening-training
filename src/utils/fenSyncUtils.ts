import TypeStorage from '../types/TypeStorage';

/**
 * Utilit√°rios para sincroniza√ß√£o de anota√ß√µes entre FENs duplicados
 *
 * Em transposi√ß√µes, o mesmo FEN pode aparecer em diferentes caminhos da √°rvore.
 * Esta biblioteca garante que anota√ß√µes sejam sincronizadas entre todas as ocorr√™ncias.
 */

/**
 * Busca todas as ocorr√™ncias de um FEN em uma variante
 *
 * @param variant - Nome da variante
 * @param targetFen - FEN a ser buscado
 * @param storage - Dados completos do TypeStorage
 * @returns Array de FENs que s√£o iguais ao targetFen (incluindo ele mesmo)
 */
export function findDuplicateFens(
  variant: string,
  targetFen: string,
  storage: TypeStorage
): string[] {
  if (!storage[variant]) return [targetFen];

  const positions = storage[variant];
  const duplicates: string[] = [];

  // Normaliza o FEN para compara√ß√£o (remove contadores de movimentos que podem variar)
  const normalizedTarget = normalizeFen(targetFen);

  Object.keys(positions).forEach(fen => {
    if (normalizeFen(fen) === normalizedTarget) {
      duplicates.push(fen);
    }
  });

  return duplicates.length > 0 ? duplicates : [targetFen];
}

/**
 * Normaliza FEN para compara√ß√£o
 * Remove os √∫ltimos dois campos (halfmove e fullmove) que podem variar em transposi√ß√µes
 *
 * Exemplo:
 * "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"
 * vira
 * "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq -"
 */
function normalizeFen(fen: string): string {
  const parts = fen.split(' ');
  // Mant√©m apenas: posi√ß√£o, turno, castling, en passant
  return parts.slice(0, 4).join(' ');
}

/**
 * Busca coment√°rio de qualquer ocorr√™ncia do FEN na √°rvore
 * Se o FEN atual n√£o tem coment√°rio, mas existe outro igual com coment√°rio, retorna aquele
 *
 * @param variant - Nome da variante
 * @param targetFen - FEN a ser verificado
 * @param storage - Dados completos do TypeStorage
 * @returns Coment√°rio encontrado ou string vazia
 */
export function findCommentForFen(
  variant: string,
  targetFen: string,
  storage: TypeStorage
): string {
  const duplicates = findDuplicateFens(variant, targetFen, storage);

  // Busca o primeiro coment√°rio n√£o-vazio
  for (const fen of duplicates) {
    const comment = storage[variant][fen]?.comment;
    if (comment && comment.trim().length > 0) {
      return comment;
    }
  }

  return '';
}

/**
 * Sincroniza coment√°rio para todas as ocorr√™ncias do FEN na √°rvore
 * Quando um coment√°rio √© editado, atualiza todos os FENs iguais
 *
 * @param variant - Nome da variante
 * @param targetFen - FEN que teve coment√°rio editado
 * @param newComment - Novo coment√°rio
 * @param storage - Dados completos do TypeStorage
 * @returns TypeStorage atualizado
 */
export function syncCommentToAllFens(
  variant: string,
  targetFen: string,
  newComment: string,
  storage: TypeStorage
): TypeStorage {
  const duplicates = findDuplicateFens(variant, targetFen, storage);
  const updatedStorage = { ...storage };

  // Atualiza coment√°rio em todas as ocorr√™ncias
  duplicates.forEach(fen => {
    if (updatedStorage[variant][fen]) {
      updatedStorage[variant][fen] = {
        ...updatedStorage[variant][fen],
        comment: newComment
      };
    }
  });

  console.log(`üìù Coment√°rio sincronizado em ${duplicates.length} FEN(s) duplicados:`, {
    targetFen: targetFen.substring(0, 30) + '...',
    comment: newComment.substring(0, 50) + (newComment.length > 50 ? '...' : ''),
    duplicates: duplicates.map(f => f.substring(0, 30) + '...')
  });

  return updatedStorage;
}

/**
 * Popula coment√°rio vazio com coment√°rio de FEN duplicado
 * Se o FEN atual n√£o tem coment√°rio, busca na √°rvore e copia se encontrar
 *
 * @param variant - Nome da variante
 * @param targetFen - FEN a ser populado
 * @param storage - Dados completos do TypeStorage
 * @returns [TypeStorage atualizado, coment√°rio encontrado]
 */
export function populateEmptyComment(
  variant: string,
  targetFen: string,
  storage: TypeStorage
): [TypeStorage, string] {
  if (!storage[variant][targetFen]) {
    return [storage, ''];
  }

  const currentComment = storage[variant][targetFen].comment;

  // Se j√° tem coment√°rio, n√£o faz nada
  if (currentComment && currentComment.trim().length > 0) {
    return [storage, currentComment];
  }

  // Busca coment√°rio em outros FENs iguais
  const foundComment = findCommentForFen(variant, targetFen, storage);

  if (foundComment && foundComment.trim().length > 0) {
    const updatedStorage = {
      ...storage,
      [variant]: {
        ...storage[variant],
        [targetFen]: {
          ...storage[variant][targetFen],
          comment: foundComment
        }
      }
    };

    console.log(`‚úÖ Coment√°rio populado automaticamente de FEN duplicado:`, {
      targetFen: targetFen.substring(0, 30) + '...',
      comment: foundComment.substring(0, 50) + (foundComment.length > 50 ? '...' : '')
    });

    return [updatedStorage, foundComment];
  }

  return [storage, ''];
}

/**
 * Verifica se existem FENs duplicados em uma variante
 * √ötil para debug e estat√≠sticas
 *
 * @param variant - Nome da variante
 * @param storage - Dados completos do TypeStorage
 * @returns Mapa de FEN normalizado ‚Üí array de FENs completos
 */
export function findAllDuplicates(
  variant: string,
  storage: TypeStorage
): Map<string, string[]> {
  if (!storage[variant]) return new Map();

  const positions = storage[variant];
  const fenMap = new Map<string, string[]>();

  Object.keys(positions).forEach(fen => {
    const normalized = normalizeFen(fen);
    const existing = fenMap.get(normalized) || [];
    existing.push(fen);
    fenMap.set(normalized, existing);
  });

  // Retorna apenas FENs que t√™m duplicatas (mais de 1 ocorr√™ncia)
  const duplicatesOnly = new Map<string, string[]>();
  fenMap.forEach((fens, normalized) => {
    if (fens.length > 1) {
      duplicatesOnly.set(normalized, fens);
    }
  });

  return duplicatesOnly;
}

/**
 * Gera relat√≥rio de transposi√ß√µes em uma variante
 *
 * @param variant - Nome da variante
 * @param storage - Dados completos do TypeStorage
 */
export function logTranspositionsReport(
  variant: string,
  storage: TypeStorage
): void {
  const duplicates = findAllDuplicates(variant, storage);

  if (duplicates.size === 0) {
    console.log(`‚ÑπÔ∏è Nenhuma transposi√ß√£o encontrada em "${variant}"`);
    return;
  }

  console.log(`üîÄ Relat√≥rio de Transposi√ß√µes - "${variant}"`);
  console.log(`   Total de posi√ß√µes √∫nicas com transposi√ß√µes: ${duplicates.size}`);
  console.log('');

  duplicates.forEach((fens, normalized) => {
    console.log(`üìç Posi√ß√£o aparece ${fens.length}x:`);
    console.log(`   FEN normalizado: ${normalized}`);

    fens.forEach((fen, index) => {
      const position = storage[variant][fen];
      const hasComment = position?.comment && position.comment.trim().length > 0;
      console.log(`   ${index + 1}. ${fen.substring(0, 40)}...`);
      console.log(`      Coment√°rio: ${hasComment ? '‚úÖ' : '‚ùå'} ${position?.comment || '(vazio)'}`);
      console.log(`      Pr√≥ximos: ${position?.nextFen?.length || 0} variante(s)`);
    });

    console.log('');
  });
}
